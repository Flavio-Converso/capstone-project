@using capstone_project.Models.DTOs.Wishlist
@model capstone_project.Models.ViewModels.UserProfileViewModel
@{
    ViewBag.NavbarMarginTop = true;
    int ownedGamesCount = Model.OwnedGames.Count();
    var wishlistItems = ViewBag.WishlistItems as IEnumerable<WishlistItemDTO>;
    int wishlistCount = wishlistItems?.Count() ?? 0;

}
<div class="container mt-5 mb-10">
<div class="row">

    <div class="text-center col-12">
        @if (Model.ProfileImg != null)
        {
                <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.ProfileImg)" alt="Profile Image" class="rounded2" />
        }
        else
        {
            <img src="/images/predefined/default-profile.jpg" alt="Default Profile Image" class="profile-image" />
        }
            <h1 class="text-white">@Model.Username</h1>
    </div>
</div>
    <div class="row mt-5">
        <div class="d-flex align-items-center fs-5">
            <span class="text-orange pe-2">
                <i class="bi bi-gear"></i> Impostazioni
            </span>
            <i class="bi bi-chevron-right text-white fs-6"></i>
            <span id="toggle-password" class="text-white ps-3 navLink" style="cursor: pointer;">Cambio password</span>
        </div>
        <hr class="text-white mt-2" />
    </div>

    <!-- Password Change Section (Initially Hidden) -->
    <div id="change-password-section" class="change-password-section mt-5" style="display: none;">
        @await Html.PartialAsync("_ChangePasswordPartial", new capstone_project.Models.ViewModels.ChangePasswordViewModel())
    </div>


<div class="row mt-4 d-flex justify-content-around ">
        <div class="myBlackBg col-5 pt-4 pb-5 d-flex flex-column justify-content-center">
            <div class="row justify-content-center mt-3">
                <span class="text-white text-center fs-3">Panoramica</span>
                <span class="text-center">
                    <i class="bi bi-speedometer2 text-orange fs-1"></i>
                </span>
                    <hr class=" text-orange w-75"/>
            </div>
            <div class="row justify-content-around">
                <div class="col-auto d-flex flex-column align-items-center">
                    <span class="text-white fs-3">@Model.UserCategoriesCount</span>
                    <span class="text-grey fs-4">Categorie pref.</span>
                </div>
                <div class="col-auto d-flex flex-column align-items-center">
                    <span class="text-white fs-3">@ownedGamesCount</span>
                    <span class="text-grey fs-4">Acquisti</span>
                </div>
                <div class="col-auto d-flex flex-column align-items-center">
                    <span class="text-white fs-3">@wishlistCount</span>
                    <span class="text-grey fs-4">Preferiti</span>
                </div>                
                <div class="col-auto d-flex flex-column align-items-center">
                    <span class="text-white fs-3">@Model.UserReviewsCount</span>
                    <span class="text-grey fs-4">Recensioni</span>
                </div>
            </div>
        </div>

        <div class="col-6 myGreyBg2 rounded py-5 ps-5 pe-3 pt-4 shadow text-white fs-5 position-relative">
            <a class="ps-2 text-secondary navLink position-absolute" asp-action="EditProfile" style="bottom:7px;right:18px;">
                <i class="bi bi-pencil-square fs-4"></i>
            </a>
            <div class="row justify-content-center mb-4">
                <i class="bi bi-person-circle text-orange fs-1 text-center"></i> 
            </div>

            <div class="row">
                <div class="col-md-6">
                    <p class="mb-2"><strong class="text-orange">Nome:</strong> @Model.Name</p>
                    <p class="mb-2"><strong class="text-orange">Cognome:</strong> @Model.Surname</p>
                    <p class="mb-2"><strong class="text-orange">Email:</strong> @Model.Email</p>
                    <p class="mb-2"><strong class="text-orange">Data di Nascita:</strong> @Model.BirthDate.ToString("d")</p>
                    <p class="mb-2"><strong class="text-orange">Paese:</strong> @Model.Country</p>
                </div>
                <div class="col-md-6">
                    <p class="mb-2"><strong class="text-orange">Città:</strong> @Model.City</p>
                    <p class="mb-2"><strong class="text-orange">Indirizzo:</strong> @Model.Address</p>
                    <p class="mb-2"><strong class="text-orange">CAP:</strong> @Model.ZipCode</p>
                    <p class="mb-2"><strong class="text-orange">Numero di Telefono:</strong> @Model.PhoneNumber</p>
                    <p class="mb-2"><strong class="text-orange">Genere:</strong> @Model.Gender</p>
                </div>
            </div>

        </div>

</div>

    @if (Model.OwnedGames.Any())
    {
<hr class="mt-10 text-white"/>
    <h3 class="text-white mt-5">Chiavi di gioco</h3>
        <div class="row">
            @foreach (var gameKey in Model.OwnedGames)
            {
                <div class="col-md-4 mb-4 mt-4">
                    <div class="game-card2 border-0 position-relative gameKey d-flex flex-column justify-content-center align-items-center">
                        <!-- Display the cover image -->
                        @if (gameKey.Game.GameImages.Any())
                        {
                            var coverImage = gameKey.Game.GameImages.First().Img;
                            var base64Image = Convert.ToBase64String(coverImage!);
                            var imgSrc = $"data:image/png;base64,{base64Image}";
                            <img src="@imgSrc" class="h-100 w-100 game-card-img" alt="@gameKey.Game.Name Cover" style="height: 200px; object-fit: cover;" />
                        }
                        else
                        {
                            <img src="~/images/default-game.png" class="card-img-top" alt="Placeholder" style="height: 200px; object-fit: cover;" />
                        }

                        <!-- Game Key (Initially hidden) -->
                        <span class="game-key text-white fs-5 position-absolute" style="display: none;cursor:pointer;" onclick="copyToClipboard('@gameKey.KeyNum')">
                            @gameKey.KeyNum <i class="bi bi-clipboard2"></i>
                        </span>

                        <!-- Badge for Platform -->
                        <span class="myBadge myOrangeBg position-absolute px-1 py-1" style="bottom: -3.5px; left: 0px;">@gameKey.Game.Platform</span>
                    </div>

                    <div class="d-flex justify-content-center align-items-center mt-2">
                        <h5 class="game-card-title text-white">@gameKey.Game.Name</h5>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="container mb-10 text-center">
            <hr class="mt-7 text-white" />
            <h3 class="text-white text-center mt-5">Non hai ancora acquistato nulla!</h3>
            <h4 class="text-orange text-center mb-5">Le tue chiavi di gioco verranno mostrate qui.</h4>               
            @if (wishlistCount != 0)
            {
            <a asp-controller="Game" asp-action="List" class="auth-btn fs-3 ">Vai alla lista dei giochi</a>
            }
        </div>
    }
    
</div>


@if (wishlistCount > 0)
{
@Html.Partial("_WishlistPartial", ViewBag.WishlistItems as IEnumerable<WishlistItemDTO>)
}
else{
    <div class="container mb-7 text-center">
    <hr class="mt-7 text-white" />
        <h3 class="text-white text-center mt-5">Non hai ancora giochi preferiti!</h3>
        <h4 class="text-orange text-center mb-5">I tuoi giochi preferiti verranno mostrati qui.</h4>
        @if (Model.OwnedGames.Any())
        {
            <a asp-controller="Game" asp-action="List" class="auth-btn fs-3 ">Vai alla lista dei giochi</a>
        }
</div>
}
@if (wishlistCount == 0 && !Model.OwnedGames.Any())
{
    <div class="container mb-10 text-center">
        <a asp-controller="Game" asp-action="List" class="auth-btn fs-3">Vai alla lista dei giochi</a>

    </div>
}
<!-- Bootstrap Modals -->
<div class="modal fade" id="copyModal" tabindex="-1" aria-labelledby="copyModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered">
        <!-- Added modal-dialog-centered -->
        <div class="modal-content">
            <div class="modal-body text-center fs-3">
                Game key copied to clipboard!
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="passwordChangedModal" tabindex="-1" aria-labelledby="passwordChangedModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center fs-3">
                Password cambiata!
            </div>
        </div>
    </div>
</div>
@section Scripts {  
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
<script>
    function copyToClipboard(gameKey) {
        // Create a temporary textarea element
        var tempInput = document.createElement('textarea');
        tempInput.value = gameKey;
        document.body.appendChild(tempInput);

        // Select the text in the textarea
        tempInput.select();
        tempInput.setSelectionRange(0, 99999); // For mobile devices

        // Copy the selected text to clipboard
        document.execCommand('copy');

        // Remove the temporary textarea element
        document.body.removeChild(tempInput);

        // Show the Bootstrap modal after copying
        var myModal = new bootstrap.Modal(document.getElementById('copyModal'));
        myModal.show();

        // Optional: Update modal content to include the game key
        document.querySelector('#copyModal .modal-body').innerText = `Chiave copiata!`;

        // Automatically hide the modal after 3 seconds
        setTimeout(function () {
            myModal.hide();
        }, 1300); // 3 seconds
    }
</script>
<script>
                 document.addEventListener("DOMContentLoaded", function () {
            const changePasswordSection = document.getElementById("change-password-section");
            const toggleButton = document.getElementById("toggle-password");

            // Check if the change password section should be shown
            const showChangePasswordSection = '@(ViewBag.ShowChangePasswordSection ?? false)'.toLowerCase() === 'true';

            // Automatically show the section if there are validation errors
            if (showChangePasswordSection) {
                changePasswordSection.style.display = "block"; // Show the section
            }

            // Toggle functionality for manual user click
            toggleButton.addEventListener("click", function () {
                if (changePasswordSection.style.display === "none") {
                    changePasswordSection.style.display = "block"; // Show the section
                } else {
                    changePasswordSection.style.display = "none"; // Hide the section
                }
            });
        });
</script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Get URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const passwordChanged = urlParams.get('passwordChanged');

            // Debugging: log the passwordChanged value to the console
            console.log("Password changed param:", passwordChanged);

            if (passwordChanged === 'True') {
                console.log("Showing password changed modal");

                // Reset scroll to top
                window.scrollTo(0, 0);

                var myModal = new bootstrap.Modal(document.getElementById('passwordChangedModal'));
                myModal.show();

                // Automatically hide the modal after 3 seconds
                setTimeout(function () {
                    myModal.hide();
                }, 2000);
            }
        });
    </script>

}